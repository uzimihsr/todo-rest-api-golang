// Code generated by MockGen. DO NOT EDIT.
// Source: todo_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/uzimihsr/todo-rest-api-golang/domain/model"
)

// MockToDoRepository is a mock of ToDoRepository interface.
type MockToDoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockToDoRepositoryMockRecorder
}

// MockToDoRepositoryMockRecorder is the mock recorder for MockToDoRepository.
type MockToDoRepositoryMockRecorder struct {
	mock *MockToDoRepository
}

// NewMockToDoRepository creates a new mock instance.
func NewMockToDoRepository(ctrl *gomock.Controller) *MockToDoRepository {
	mock := &MockToDoRepository{ctrl: ctrl}
	mock.recorder = &MockToDoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockToDoRepository) EXPECT() *MockToDoRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockToDoRepository) Create(arg0 *model.ToDo) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockToDoRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockToDoRepository)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockToDoRepository) Delete(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockToDoRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockToDoRepository)(nil).Delete), arg0)
}

// List mocks base method.
func (m *MockToDoRepository) List(arg0 *model.ToDoSelector) ([]model.ToDo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]model.ToDo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockToDoRepositoryMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockToDoRepository)(nil).List), arg0)
}

// Read mocks base method.
func (m *MockToDoRepository) Read(arg0 int64) (*model.ToDo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(*model.ToDo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockToDoRepositoryMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockToDoRepository)(nil).Read), arg0)
}

// Update mocks base method.
func (m *MockToDoRepository) Update(arg0 *model.ToDo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockToDoRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockToDoRepository)(nil).Update), arg0)
}
